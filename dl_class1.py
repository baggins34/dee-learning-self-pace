# -*- coding: utf-8 -*-
"""dl_class1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1edkjWQyXwnbh2m452yPou-5SRz9furGw
"""

# Commented out IPython magic to ensure Python compatibility.
try:
    from google.colab import drive
    drive.mount('/content/drive', force_remount=True)
    COLAB = True
    print("Note: using Google CoLab")
#     %tensorflow_version 2.x
except:
    print("Note: not using Google CoLab")
    COLAB = False

!ls /content/drive/My\ Drive/Colab\ Notebooks

"""## **Part 2**"""

a = 10 
print(f"The value of a is {a}")

"""without f the output: "The value of a is {a}""""

# Another way is 
print("a is %d" % a)

"""### **Part 3**"""

l = ["a", "b", "c", "d"]
t = ("a", "b", "c", "d")

print(l)
print(t)

# To change a value in a list
l[1] = "changed"
print(l)

for s in l:
  print(s)

for i, l in enumerate(l):
  print(f"{i}: {l}")

c = ['a', 'b', 'c']
print("First List: ", c)
c.insert(0, 'a0')
print("Second List: ", c)
c.remove('b')
print("Third List: ", c)
del c[0]
print("Forth List: ", c)

s = set()
s = {'a', 'b', 'c'}
s = set(['a', 'b', 'c'])
print(s)

c = set()
c.add('a')
c.add('b')
c.add('c')
print(c)

d = {'Name': 'Frodo', 'Surname': 'Baggins'}
print("Dictionary", d)
print("Name in the dictionary: ", d['Name'])

if 'Name' in d:
  print("Name is defined.")

if 'Age' in d:
  print("Age is defined.")
else:
  print("Age is not defined.")

print(f"Keys of d: {d.keys()}, Values of d: {d.values()}")

customers = [{'Name': 'Lord Elrond', 'Pets': ["Asgolath", "Brigo", "Shadowfax"]},
             {'Name': 'Sauron', "Pets": ["Shelob", "Smaug"]},
             {'Name': "Elendil"}]

print(customers)

for customer in customers:
  print(f"{customer['Name']}: {customer.get('Pets', 'no pets')}")

a = [1, 2, 3, 4, 5]
b = [6, 7, 8, 9, 10]

print(zip(a, b))

print(list(zip(a, b)))

for x, y in zip(a, b):
  print(f"{x} * {y} = {x*y}")

a = [1, 2, 3, 4, 5, 6]
b = [7, 8, 9]
print(list(zip(a, b)))

"""Use **enumerate** to track index location for a collection element"""

a = [34, 65, 89, 32, 56, 89, 0, 21, 65, 78, 99]
print("a at first: ", a)
for i, x in enumerate(a):
  if x > 33:
    a[i] = 5
print("a at last: ", a)

my_list = [x**2 for x in range(10)]
print(my_list)

text = ["col-one", "col-two", "col-three"]
look_up = {key: value for (value, key) in enumerate(text)}
print(look_up)
print(f"The value of col-two is: {look_up['col-two']}")

"""# **JSON**"""

jsonHardCoded = {
    "First-Name": "Frodo",
    "Last-Name": "Baggins",
    "is-Alive": True,
    "Age": 27,
    "Adress": {
        "Street-Adress": "Bag End",
        "Country": "Shire",
        "City": "Hobbiton"
    },
    "Phone-Number": [{"Type": "Home", "Number": "1234567"},
                     {"Type": "Work", "Number": "9876543"}],
    "Children": [],
    "Spouse": None
    }
print(jsonHardCoded)

import json

jsonHard = '{"First-Name": "Frodo", "Last-Name": "Baggins"}'
obj = json.loads(jsonHard)
print(f"First Name: {obj['First-Name']}")

import requests

r = requests.get("https://raw.githubusercontent.com/jeffheaton/"
                 +"t81_558_deep_learning/master/person.json")
print(r.json())

python_obj = {"Firs-Name": "Frodo", "Last-Name": "Baggins"}
print(json.dumps(python_obj))

"""## **Part 4**"""

import pandas as pd 

df = pd.read_csv("https://data.heatonresearch.com/data/t81-558/iris.csv")
#display(df.head())
display(df[:5])

"""**What if we want to "stream" a huge file.**"""

import csv
import urllib.request
import codecs
import numpy as np

url = "https://data.heatonresearch.com/data/t81-558/iris.csv"

urlstream = urllib.request.urlopen(url)
csvfile = csv.reader(codecs.iterdecode(urlstream, "utf-8"))
next(csvfile)  # Skip header row

sum = np.zeros(4)
count = 0

for line in csvfile:
  line2 = np.array(line)[:4].astype(float)

  if len(line2) == 4:
    sum += line2
    count += 1

print(sum/count)

"""**Read a text File**"""

import urllib.request

url = "https://www.constitution.org/usdeclar.txt"
with urllib.request.urlopen(url) as urlstream:
    for line in codecs.iterdecode(urlstream, 'utf-8'):
        print(line.rstrip())

"""**Read an Image**"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from PIL import Image
import requests
from io import BytesIO

url = "https://upload.wikimedia.org/wikipedia/commons/9/92/Brookings.jpg"

response = requests.get(url)
img = Image.open(BytesIO(response.content))

img

"""## **Part 5**"""

def say_hello(speaker, person_to_greet, greeting="Hello"):
  print(f"{greeting} {person_to_greet}, this is {speaker}")

say_hello("Elrond", "Gandalf")
say_hello("Galadriel", "Mithrandir", "Mellon")

def process_string(str):
  t = str.strip()
  return t[0].upper() + t[1:]

process_string("theoden           ")

the_list = ["       elrond       ",  "              arwen         ", "         gimli            ", "        thranduil            "]
last_list = list(map(process_string, the_list))
print(last_list)

second_list = ["      moria   ", "    shire", "        mordor         ", "     imladris         "]
final_list = [ i for i in map(process_string, second_list)]
print(final_list)

def greater_than_five(x):
  return x > 5

my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

filtered_list = [i for i in filter(greater_than_five, my_list)]
print(filtered_list)

lambda_list = list(filter(lambda x: x > 6, my_list))
print(lambda_list)

from functools import reduce

result = (reduce(lambda x, y: x+y, my_list))
print(result)

